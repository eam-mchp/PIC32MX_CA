#!/usr/bin/env groovy

// This file was generated by the CI/CD Assistant version 1.0.329.
// See the user guide for information on how to customize and use this file.

pipeline {
    environment {
        BUILD_CONFIGURATION = 'default'
        SUPPORT_SCRIPT_REPO = 'https://raw.githubusercontent.com/MicrochipTech/cicd-assistant/v1.0.0'
        SIMULATE_BUILD_CONFIGURATION = 'default'
        JUNIT_TEST_RESULT_XML = "junit-test-result.xml"
    }
    agent any
    stages {
        stage('Build') {
            agent {
                dockerfile  {
                    filename 'Dockerfile'
                    registryUrl "https://hub.docker.com/"
                    registryCredentialsId "mycreds"
                }
            }
            steps {
                sh(
                    label: 'Generate build makefiles',
                    script: "prjMakefilesGenerator.sh -v -f ./@${env.BUILD_CONFIGURATION}"
                )
                sh(
                    label: 'Running Makefile',
                    script: """
                            rm -rf ./build
                            rm -rf ./dist
                            make clean
                            make CONF=${env.BUILD_CONFIGURATION}
                            """
                )
                stash name: 'build',
                      includes: 'dist/**/*',
                      allowEmpty: true
            }
        }
        stage('Analyse') {
            agent {
                dockerfile  {
                    filename 'Dockerfile'
                    registryUrl "https://hub.docker.com/"
                    registryCredentialsId "mycreds"
                }
            }
            steps {
                sh(
                    label: 'Running MISRA Analysis',
                    script: """
                            rm -rf cppcheck-result.xml
                            misracli.sh --xml cppcheck-result.xml ./ || true
                            """
                )
                stash name: 'misra',
                      includes: 'cppcheck-result.xml',
                      allowEmpty: true
            }
        }
        stage('Simulate') {
            agent {
                dockerfile  {
                    filename 'Dockerfile'
                    registryUrl "https://hub.docker.com/"
                    registryCredentialsId "mycreds"
                }
            }
            environment {
                SIMULATE_MDB_SCRIPT_FILE = "mdb-simulator-script.txt"
                SIMULATE_BINARY_FILE = "./dist/build.elf"
                SIMULATE_SERIAL_OUTPUT_FILE = "sercom_output.txt"
                SIMULATE_COVERAGE_FILE = "simulator_coverage.txt"
            }
            steps {
                sh(
                    label: 'Generate simulate makefiles',
                    script: "prjMakefilesGenerator.sh -v -f ./@${env.SIMULATE_BUILD_CONFIGURATION}"
                )
                sh(
                    label: 'Running Makefile',
                    script: """
                            rm -rf ./build
                            rm -rf ./dist
                            make clean
                            make CONF=${env.SIMULATE_BUILD_CONFIGURATION}
                            """
                )
                sh(
                    label: 'Copy binary file to location expected by MDB script',
                    script: """
                            rm -rf ${env.SIMULATE_BINARY_FILE}
                            rm -rf ${env.SIMULATE_SERIAL_OUTPUT_FILE}
                            cp ./dist/**/**/*.elf ${env.SIMULATE_BINARY_FILE}
                            """
                )
                sh(
                    label: 'Run MDB script on simulator',
                    script: """
                            mdb.sh ${env.SIMULATE_MDB_SCRIPT_FILE}
                            rm -rf ${env.SIMULATE_BINARY_FILE}
                            """
                )
                sh(
                    label: 'Convert serial output to junit test result (xml)',
                    script: """
                            if [ -f "${env.SIMULATE_SERIAL_OUTPUT_FILE}" ]; then
                                echo "Serial communication captured during simulation (raw):"
                                cat ${env.SIMULATE_SERIAL_OUTPUT_FILE}

                                curl ${env.SUPPORT_SCRIPT_REPO}/unity2junit.js -o unity2junit.js
                                rm -rf ${env.JUNIT_TEST_RESULT_XML}
                                node unity2junit.js ${env.SIMULATE_SERIAL_OUTPUT_FILE} ${env.JUNIT_TEST_RESULT_XML}
                            else
                                echo "Warning: The simulation did not generate any serial output file"
                            fi
                            """
                )
                stash name: 'simulate',
                      includes: "${env.JUNIT_TEST_RESULT_XML}",
                      allowEmpty: true
            }
        }
        stage('Documentation') {
            agent {
                dockerfile  {
                    filename 'Dockerfile'
                    registryUrl "https://hub.docker.com/"
                    registryCredentialsId "mycreds"
                }
            }
            steps {
                sh(
                    label: 'Generate Doxygen documentation',
                    script: """
                            [ -f Doxyfile ] || doxygen -g Doxyfile
                            doxygen Doxyfile
                            """
                )
                stash name: 'doxygen',
                      includes: 'html/**/*,latex/**/*',
                      allowEmpty: true
            }
        }
        stage('Publish') {
            steps {
                unstash 'build'
                dir('dist') {
                    zip archive: true,
                        glob: '**/*',
                        overwrite: true,
                        zipFile: 'dist.zip'
                }
                unstash 'doxygen'
                dir('html') {
                    zip archive: true,
                        glob: '**/*',
                        overwrite: true,
                        zipFile: 'doc-html.zip'
                }
                unstash 'simulate'
                junit allowEmptyResults: true, testResults: "${env.JUNIT_TEST_RESULT_XML}"
                unstash 'misra'
                recordIssues(tools: [
                    cppCheck(pattern: 'cppcheck-result.xml', reportEncoding: 'ISO-8859-1'),
                    gcc()
                    ])
            }
        }
    }
    post {
        // Optional: Add success build steps here.
        // success {
        //
        // }
        always {
            // Clean workspace after build
            cleanWs()
        }
    }
}
